// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/learning/learning.proto

package learning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LearningServiceClient is the client API for LearningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningServiceClient interface {
	CreateClassRooms(ctx context.Context, in *CreateClassRoomsRequest, opts ...grpc.CallOption) (*OperationStatus, error)
	CreateClassRoom(ctx context.Context, in *CreateClassRoomRequest, opts ...grpc.CallOption) (*ClassRoom, error)
	GetClassRoomsBySubject(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ClassRooms, error)
	GetClassRoom(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ClassRoom, error)
	DeleteClassRoom(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*OperationStatus, error)
	DeleteClassRoomsByTeacher(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*OperationStatus, error)
	UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*OperationStatus, error)
	// CHAPTER
	CreateChapter(ctx context.Context, in *CreateChapterRequest, opts ...grpc.CallOption) (*Chapter, error)
	// LESSONS
	GetLessonsByClassRoom(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Lessons, error)
	CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*Lesson, error)
}

type learningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningServiceClient(cc grpc.ClientConnInterface) LearningServiceClient {
	return &learningServiceClient{cc}
}

func (c *learningServiceClient) CreateClassRooms(ctx context.Context, in *CreateClassRoomsRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/learning.LearningService/CreateClassRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) CreateClassRoom(ctx context.Context, in *CreateClassRoomRequest, opts ...grpc.CallOption) (*ClassRoom, error) {
	out := new(ClassRoom)
	err := c.cc.Invoke(ctx, "/learning.LearningService/CreateClassRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetClassRoomsBySubject(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ClassRooms, error) {
	out := new(ClassRooms)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetClassRoomsBySubject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetClassRoom(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*ClassRoom, error) {
	out := new(ClassRoom)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetClassRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) DeleteClassRoom(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/learning.LearningService/DeleteClassRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) DeleteClassRoomsByTeacher(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/learning.LearningService/DeleteClassRoomsByTeacher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*OperationStatus, error) {
	out := new(OperationStatus)
	err := c.cc.Invoke(ctx, "/learning.LearningService/UploadVideo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) CreateChapter(ctx context.Context, in *CreateChapterRequest, opts ...grpc.CallOption) (*Chapter, error) {
	out := new(Chapter)
	err := c.cc.Invoke(ctx, "/learning.LearningService/CreateChapter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetLessonsByClassRoom(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*Lessons, error) {
	out := new(Lessons)
	err := c.cc.Invoke(ctx, "/learning.LearningService/GetLessonsByClassRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) CreateLesson(ctx context.Context, in *CreateLessonRequest, opts ...grpc.CallOption) (*Lesson, error) {
	out := new(Lesson)
	err := c.cc.Invoke(ctx, "/learning.LearningService/CreateLesson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServiceServer is the server API for LearningService service.
// All implementations must embed UnimplementedLearningServiceServer
// for forward compatibility
type LearningServiceServer interface {
	CreateClassRooms(context.Context, *CreateClassRoomsRequest) (*OperationStatus, error)
	CreateClassRoom(context.Context, *CreateClassRoomRequest) (*ClassRoom, error)
	GetClassRoomsBySubject(context.Context, *IDRequest) (*ClassRooms, error)
	GetClassRoom(context.Context, *IDRequest) (*ClassRoom, error)
	DeleteClassRoom(context.Context, *IDRequest) (*OperationStatus, error)
	DeleteClassRoomsByTeacher(context.Context, *IDRequest) (*OperationStatus, error)
	UploadVideo(context.Context, *UploadVideoRequest) (*OperationStatus, error)
	// CHAPTER
	CreateChapter(context.Context, *CreateChapterRequest) (*Chapter, error)
	// LESSONS
	GetLessonsByClassRoom(context.Context, *IDRequest) (*Lessons, error)
	CreateLesson(context.Context, *CreateLessonRequest) (*Lesson, error)
	mustEmbedUnimplementedLearningServiceServer()
}

// UnimplementedLearningServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLearningServiceServer struct {
}

func (UnimplementedLearningServiceServer) CreateClassRooms(context.Context, *CreateClassRoomsRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClassRooms not implemented")
}
func (UnimplementedLearningServiceServer) CreateClassRoom(context.Context, *CreateClassRoomRequest) (*ClassRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClassRoom not implemented")
}
func (UnimplementedLearningServiceServer) GetClassRoomsBySubject(context.Context, *IDRequest) (*ClassRooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassRoomsBySubject not implemented")
}
func (UnimplementedLearningServiceServer) GetClassRoom(context.Context, *IDRequest) (*ClassRoom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassRoom not implemented")
}
func (UnimplementedLearningServiceServer) DeleteClassRoom(context.Context, *IDRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassRoom not implemented")
}
func (UnimplementedLearningServiceServer) DeleteClassRoomsByTeacher(context.Context, *IDRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClassRoomsByTeacher not implemented")
}
func (UnimplementedLearningServiceServer) UploadVideo(context.Context, *UploadVideoRequest) (*OperationStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedLearningServiceServer) CreateChapter(context.Context, *CreateChapterRequest) (*Chapter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChapter not implemented")
}
func (UnimplementedLearningServiceServer) GetLessonsByClassRoom(context.Context, *IDRequest) (*Lessons, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLessonsByClassRoom not implemented")
}
func (UnimplementedLearningServiceServer) CreateLesson(context.Context, *CreateLessonRequest) (*Lesson, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLesson not implemented")
}
func (UnimplementedLearningServiceServer) mustEmbedUnimplementedLearningServiceServer() {}

// UnsafeLearningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServiceServer will
// result in compilation errors.
type UnsafeLearningServiceServer interface {
	mustEmbedUnimplementedLearningServiceServer()
}

func RegisterLearningServiceServer(s grpc.ServiceRegistrar, srv LearningServiceServer) {
	s.RegisterService(&LearningService_ServiceDesc, srv)
}

func _LearningService_CreateClassRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).CreateClassRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/CreateClassRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).CreateClassRooms(ctx, req.(*CreateClassRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_CreateClassRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClassRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).CreateClassRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/CreateClassRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).CreateClassRoom(ctx, req.(*CreateClassRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetClassRoomsBySubject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetClassRoomsBySubject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetClassRoomsBySubject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetClassRoomsBySubject(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetClassRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetClassRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetClassRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetClassRoom(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_DeleteClassRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).DeleteClassRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/DeleteClassRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).DeleteClassRoom(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_DeleteClassRoomsByTeacher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).DeleteClassRoomsByTeacher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/DeleteClassRoomsByTeacher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).DeleteClassRoomsByTeacher(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_UploadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).UploadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/UploadVideo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).UploadVideo(ctx, req.(*UploadVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_CreateChapter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChapterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).CreateChapter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/CreateChapter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).CreateChapter(ctx, req.(*CreateChapterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetLessonsByClassRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetLessonsByClassRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/GetLessonsByClassRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetLessonsByClassRoom(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_CreateLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).CreateLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/learning.LearningService/CreateLesson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).CreateLesson(ctx, req.(*CreateLessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningService_ServiceDesc is the grpc.ServiceDesc for LearningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "learning.LearningService",
	HandlerType: (*LearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClassRooms",
			Handler:    _LearningService_CreateClassRooms_Handler,
		},
		{
			MethodName: "CreateClassRoom",
			Handler:    _LearningService_CreateClassRoom_Handler,
		},
		{
			MethodName: "GetClassRoomsBySubject",
			Handler:    _LearningService_GetClassRoomsBySubject_Handler,
		},
		{
			MethodName: "GetClassRoom",
			Handler:    _LearningService_GetClassRoom_Handler,
		},
		{
			MethodName: "DeleteClassRoom",
			Handler:    _LearningService_DeleteClassRoom_Handler,
		},
		{
			MethodName: "DeleteClassRoomsByTeacher",
			Handler:    _LearningService_DeleteClassRoomsByTeacher_Handler,
		},
		{
			MethodName: "UploadVideo",
			Handler:    _LearningService_UploadVideo_Handler,
		},
		{
			MethodName: "CreateChapter",
			Handler:    _LearningService_CreateChapter_Handler,
		},
		{
			MethodName: "GetLessonsByClassRoom",
			Handler:    _LearningService_GetLessonsByClassRoom_Handler,
		},
		{
			MethodName: "CreateLesson",
			Handler:    _LearningService_CreateLesson_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/learning/learning.proto",
}
